#!/bin/bash
#
# bandit - the Build AND Install Toolkit
#
# Copyright (C) 2015-2107 Angel Linares Zapater
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation. See the COPYING file.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#

source $BANDIT_HOME/etc/release.conf

###----------------------------------------
# Simple information displaying commands. 
# Do not source scripts yet. Just show and quit.
###----------------------------------------

bandit_show_version()
{
    echo "bandit $RELEASE - The Build AND Install Toolkit"
    echo
    echo " Copyright (C) 2015-2017 Angel Linares Zapater"
    echo " BANDIT comes with ABSOLUTELY NO WARRANTY." 
    echo
    echo "This is free software, and you are welcome to redistribute it"
    echo "under certain conditions. Visit http://phy.wiki/doc/bandit"
    echo
}

bandit_show_help()
{
    echo "Usage for bandit:"
    echo "  bandit edit     Edit BANDIT configuration"
    echo
    echo "  bandit search [--no-pager] [-c|-b|-i|-f|-x] <expression>"
    echo "    --no-pager    Do not page results"
    echo "    -r            Search for repositories"
    echo "    -c            Search for catalogs"
    echo "    -b            Search for bundles"
    echo "    -i            Search for items in bundles"
    echo "    -f            Search for installed files"
    echo "    -x            Search cache for sources and builds"
    echo "    <expression>  partial expression to search for"
    echo "                  or 'all' for everything"
    echo
    echo "Usage for systems: "
    echo "  bandit -s|--system <system> <action>" 
    echo "     host check   Checks the building requiremts of the HOST"
    echo "     host init    Creates users and partitions on the HOST"
    echo "     host clean   Cleans the HOST from previous installations"
    echo "     target init  Initialize the TARGET filesystem"
    echo
    echo "Usage for repositories: "
    echo "  bandit -r|--repository <repository> <action>" 
    echo "    <repository>: Name of the repository"
    echo "    <action>:"
    echo "      download    Download the repository manifest into cache"
    echo "      install     Install the repository manifest from cache"
    echo "                  --all for installing catalogs in the manifest"
    echo "      update      Download and install the repository manifest"
    echo "                  --all for updating catalogs in the manifest"
    echo "      remove      Remove the repository manifest"
    echo "                  --all for removing catalogs in the manifest"
    echo "      show        List catalogs in the repository manifest"
    echo "                  --md5 for MD5 checksums"
    echo
    echo "Usage for catalogs: "
    echo "  bandit -c|--catalog <catalog> <action>" 
    echo "    <catalog>:    Name of the catalog"
    echo "    <action>:"
    echo "      download    Download (inconditionally) the catalog tarball"
    echo "      fetch       Download (when not in cache) the catalog tarball"
    echo "      install     Install the catalog"   
    echo "      remove      Remove the catalog"   
    echo
    echo "Usage for bundles: "
    echo "  bandit [-b|--bundle] <bundle> [-i|--item <item>] <action>" 
    echo "    <bundle>:     Name of the bundle"
    echo "    -i <item>:    Apply the action only to this item in the bundle"
    echo "    <action>:"
    echo "      edit        Edit the configuration file"
    echo "      download    Download (inconditionally) from origins"
    echo "      fetch       Download (when not in cache) from origins"
    echo "                  --sources for fetching sources"
    echo "                  --builds for fetching sources"
    echo "                  --all for fetching sources and builds"
    echo "      config      Only with -i. Interactively configure the bundle item"
    echo "      build       Only with -i. Build the bundle and save a build pack in local cache"
    echo "      install     Only with -i. Install the build pack from local cache"
    echo "      raise       Build first and then install"
    echo "      remove      Remove the bundle from the system"
    echo
    echo "Usage for packages: "
    echo "  bandit -p|--package <package> <action>" 
    echo "    <package>:    Name of the package(s)."
    echo "                  Use <package*> for multiple packages."
    echo "    <action>:"
    echo "      info        Provides information about the package"
    echo "      bundles     List bundles that install this package"
    echo "      files       List installed files for that package"
    echo
}

case $1 in 
    -h|--help | "")
	bandit_show_version
	bandit_show_help
	exit 0
	;;
    -v|--version)
	bandit_show_version
	exit 0
	;;
esac

###----------------------------------------
# Working with verbs and objects...
# Source files now.
###----------------------------------------

source $BANDIT_HOME/etc/bandit.conf
source $BANDIT_HOME/bin/bandit_common
source $BANDIT_HOME/bin/bandit_database
source $BANDIT_HOME/bin/bandit_search
source $BANDIT_HOME/bin/bandit_find
source $BANDIT_HOME/bin/bandit_repository
source $BANDIT_HOME/bin/bandit_catalog
source $BANDIT_HOME/bin/bandit_bundle

# Determine the use of a pager
if [ "$BANDIT_PAGER" = "none" ]; then 
    pager="no"
    # Set defaut pager
    BANDIT_PAGER="more"
else
    pager=yes
fi
case "$1" in 
    "--pager")
	pager="yes"
	shift
	;;
    "--no-pager")
	pager="no"
	shift
	;;
esac

#--- 
# Work with verbs...
#---

case $1 in
    edit)
	shift;
	${EDITOR:-vi} $BANDIT_HOME/etc/bandit.conf
	exit 0
	;;
    search)
	shift;
	
	# Get search options
	options=""
	while getopts "rcbixfl" opt; do
	    case $opt in
		r|c|b|i|x|f|l)
		    options+=$opt
		    ;;
		\?)
		    echo "Invalid option: -$OPTARG"
		    exit 1
		    ;;
	    esac
	done
	# Skip options so expression is left in $1
	shift $((OPTIND-1))

	# Set default search options when none are provided
	if [ "$options" == "" ]; then
	    if [ "$@" ]; then
		# Search the expression in bundles and items
		options="bi"    
	    else
		# No expression. Show repositories and catalogs 
		options="rc"
	    fi
	fi

	# Get search expression
	expr="all"
	[ $# -ge 1 ] && expr=$1
	
	# Do the search
	if [ "$pager" == "yes" ]; then
	    bandit_search ${expr} ${options} | $BANDIT_PAGER
	else
	    bandit_search ${expr} ${options}
	fi

	exit 0
	;;
esac

#---
# Work with objects...
#---

# Check if any type of object is set or set default 
object="--default"
if [[ $1 == -* ]]; then object=$1; fi

case $object in
    -r|--repository)
	shift

	# Get repository 
	REPOSITORY=$1
	shift
	
	# Execute command
	COMMAND=$1
	shift
	COMMAND_PARAMS=$*
	case $COMMAND in
	    download | fetch | install | update | remove | show)
		bandit_repository_do
		;;
	    *) 
		bandit_exit "BANDIT: Command ${COMMAND} not defined for repositories."
		;;
	esac
	;;
    -c|--catalog)
	shift

	# Get catalog 
	CATALOG=$1
	shift
	
	# Execute command
	COMMAND=$1; shift
	COMMAND_PARAMS=$*
	case $COMMAND in
	    find | download | fetch | install | remove)
		bandit_catalog_do
		;;
	    *) 
		bandit_exit "BANDIT: Command ${COMMAND} not defined for catalogs."
		;;
	esac
	;;
    -b|--bundle | --default)
	# Get the bundle name
	if [ "$object" != "--default" ]; then shift; fi

	BUNDLE=$1
	shift

	# Get optional item in the bundle
	ITEM="all"
	case $1 in 
	    -i|--item) 
		shift
		ITEM="$1"; shift
		;;
	esac

	# Get the command
	COMMAND=$1; shift

	# Get optional command parameters
	COMMAND_PARAMS="--all"
	if [[ $1 == -* ]]; then COMMAND_PARAMS="$1"; fi # Capture also one dash params to warn
	case $COMMAND_PARAMS in
	    --all | --sources | --builds)
		:
		;;
	    *)
		bandit_exit "BANDIT: Command parameter ${command_params} not defined for bundles."
		;;
	esac
		
        # Start the work on the bundle
	bandit_mkdir $BANDIT_LOGS/bundles
	case $COMMAND in
	    config | edit)
		# Run interactively without logging
		bandit_bundle_do 
		;;
	    download | fetch | build | install | raise | remove)
		# All other commands run non-interactively and log
		bandit_timestamp stamp
		(time bandit_bundle_do) 2>&1 \
		    | tee $BANDIT_LOGS/bundles/${BUNDLE}.$COMMAND-${stamp}.log
		;;
	    *) 
		bandit_exit "BANDIT: Command ${COMMAND} not defined for bundles."
		;;
	esac
	;;
    -p|--package)
	shift

	# Get package expression
	package_expr=$1; shift
	
	# Execute command
	COMMAND=$1; shift
	COMMAND_PARAMS="$@"
	
	case $COMMAND in
	    bundles)
		bandit_db_get_packages_available packages ${package_expr}
		for p in $packages
		do
		    bandit_path_get_catalog CATALOG $p
		    bandit_path_get_bundle  BUNDLE  $p
		    bandit_path_get_package PACKAGE $p
   		    echo "[$CATALOG/${BUNDLE}] ${PACKAGE}" 
		done
		;;
	    files)
		bandit_db_get_packages_installed packages ${package_expr}
		for p in $packages
		do
		    bandit_path_get_package PACKAGE $p
		    bandit_db_get_package_files $PACKAGE
		done
		;;
	    info)
		bandit_db_get_packages_available packages ${package_expr}
		for p in $packages
		do
		    bandit_path_get_catalog CATALOG $p
		    bandit_path_get_bundle  BUNDLE  $p
		    bandit_path_get_package PACKAGE $p
		    echo "Information for [$CATALOG/${BUNDLE}] ${PACKAGE}" 
		    bandit_db_get_package_info $PACKAGE
		done
		;;
	    *) 
		bandit_exit "BANDIT: Command ${COMMAND} not defined for packages."
		;;
	esac
	;;
    -s|--system)
	shift

	bandit_mkdir $BANDIT_LOGS/systems
	bandit_timestamp stamp
	(time sh $BANDIT_HOME/bin/systems/bandit-"$1"-"$2".sh) 2>&1 \
            | tee $BANDIT_LOGS/systems/bandit-"$1"."$2"-${stamp}.log
	;;
    *)
	bandit_exit "BANDIT: Unknow option $1."
	;;
esac

# Done
exit 0
