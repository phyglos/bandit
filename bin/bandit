#!/bin/bash
#
# bandit - the Build AND Install Toolkit
#
# Copyright (C) 2015-2019 Angel Linares Zapater
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation. See the COPYING file.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#

source $BANDIT_HOME/etc/bandit.conf
source $BANDIT_HOME/bin/bandit_common
source $BANDIT_HOME/bin/bandit_database

###----------------------------------------
# Display-only information commands. 
# Do not source all scripts yet. Just show info and quit.
###----------------------------------------

source $BANDIT_HOME/bin/bandit_help
source $BANDIT_HOME/bin/bandit_search

#---
# Work with display-only commands
#---

# Determine the use of a pager
if [ "$BANDIT_PAGER" = "none" ]; then 
    pager="no"
    # Set defaut pager
    BANDIT_PAGER="more"
else
    pager=yes
fi

# Change default pager
case $1 in 
    "--pager")
        pager="yes"
        shift
        ;;
    "--no-pager")
        pager="no"
        shift
        ;;
esac

case $1 in 
    -h|--help | help )
        shift
        
        case $1 in
            edit)
                bandit_show_help_edit
                ;;
            search)
                bandit_show_help_search
                ;;
            systems)
                bandit_show_help_systems
                ;;
            repositories)
                bandit_show_help_repositories
                ;;
            catalogs)
                bandit_show_help_catalogs
                ;;
            bundles)
                bandit_show_help_bundles
                ;;
            packages)
                bandit_show_help_packages
                ;;
            caches)
                bandit_show_help_caches
                ;;
            *)
                bandit_show_version
                bandit_show_help
                ;;
        esac
        exit 0
        ;;
    -v|--version)
        bandit_show_version
        exit 0
        ;;
    "" )
        bandit_show_bandit
        exit 0
        ;;
esac

#---
# Work with write-only commands
#---

case $1 in
    edit)
        shift

        # Check permissions to write bandit.conf file
        [ -w $BANDIT_HOME/etc/bandit.conf ] || bandit_exit "BANDIT: Permission denied to write bandit.conf file."

        
        ${EDITOR:-vi} $BANDIT_HOME/etc/bandit.conf
        source $BANDIT_HOME/etc/bandit.conf
        exit 0
        ;;
esac

#---
# Work with read-only commands
#---

# bandit help and bandit edit are already processed.
if [[ "$1" == "-x" || "$1" == "--cache" ]]; then
    if [[ "$3" == "init" ]]; then
        : # bandit -x * init should proceed; maybe the cache does not exist.
    fi
else   
    # Check permissions to read files...
    [ -r $BANDIT_LOGS ]          || bandit_exit "BANDIT: Permission denied to read from logs directory $BANDIT_LOGS".
    [ -r $BANDIT_XBUILDS ]       || bandit_exit "BANDIT: Permission denied to read from builds cache $BANDIT_XBUILDS."
    [ -r $BANDIT_XSOURCES ]      || bandit_exit "BANDIT: Permission denied to read from sources cache $BANDIT_XSOURCES."
    [ -r $BANDIT_XCATALOGS ]     || bandit_exit "BANDIT: Permission denied to read from catalogs cache $BANDIT_XCATALOGS."
    [ -r $BANDIT_XREPOSITORIES ] || bandit_exit "BANDIT: Permission denied to read from repositories cache $BANDIT_XREPOSITORIES."
    [ -r $BANDIT_CATALOGS ]      || bandit_exit "BANDIT: Permission denied to read from catalogs directory $BANDIT_CATALOGS."
    [ -r $BANDIT_REPOSITORIES ]  || bandit_exit "BANDIT: Permission denied to read from repositories directory $BANDIT_REPOSITORIES."
fi

case $1 in 
    search)
        shift
        
        # Get search options
        options=""
        while getopts "rcbixfl" opt; do
            case $opt in
                r|c|b|i|f|l|x)
                    options+=$opt
                    ;;
                \?)
                    echo "Invalid option: -$OPTARG"
                    exit 1
                    ;;
            esac
        done
        # Skip options so expression is left in $1
        shift $((OPTIND-1))

        # Set default search options when none are provided
        if [ "$options" == "" ]; then
            if [ "$@" ]; then
                # Search the expression in bundles and items
                options="bi"    
            else
                # No expression. Show repositories and catalogs 
                options="rc"
            fi
        fi

        # Get search expression
        expr="all"
        [ $# -ge 1 ] && expr=$1
        
        # Do the search
        if [ "$pager" == "yes" ]; then
            bandit_search ${expr} ${options} | $BANDIT_PAGER
        else
            bandit_search ${expr} ${options}
        fi
        
        exit 0
        ;;
esac

###----------------------------------------
# Working with commands and objects...
###----------------------------------------

source $BANDIT_HOME/bin/bandit_find
source $BANDIT_HOME/bin/bandit_cache
source $BANDIT_HOME/bin/bandit_system
source $BANDIT_HOME/bin/bandit_repository
source $BANDIT_HOME/bin/bandit_catalog
source $BANDIT_HOME/bin/bandit_bundle

if [[ "$1" == "-x" || "$1" == "--cache" ]]; then
    if [[ "$3" == "init" ]]; then
        : # bandit -x * init should proceed; maybe the cache does not exist.
    fi
else   
    # Check permissions to write files...
    [ -w $BANDIT_TMP ]           || bandit_exit "BANDIT: Permission denied to write in the work directory $BANDIT_TMP."
    [ -w $BANDIT_LOGS ]          || bandit_exit "BANDIT: Permission denied to write in the logs directories $BANDIT_LOGS."
    [ -w $BANDIT_XBUILDS ]       || bandit_exit "BANDIT: Permission denied to write in the builds cache $BANDIT_XBUILDS."
    [ -w $BANDIT_XSOURCES ]      || bandit_exit "BANDIT: Permission denied to write in the sources cache $BANDIT_XSOURCES."
    [ -w $BANDIT_XCATALOGS ]     || bandit_exit "BANDIT: Permission denied to write in the catalogs cache $BANDIT_XCATALOGS."
    [ -w $BANDIT_XREPOSITORIES ] || bandit_exit "BANDIT: Permission denied to write in the repositories cache $BANDIT_XREPOSITORIES."
    [ -w $BANDIT_CATALOGS ]      || bandit_exit "BANDIT: Permission denied to write in the catalogs directory $BANDIT_CATALOGS."
    [ -w $BANDIT_REPOSITORIES ]  || bandit_exit "BANDIT: Permission denied to write in the repositories directory $BANDIT_REPOSITORIES."
fi

# Check if any type of object is set or set default 
object="--default"
if [[ $1 == -* ]]; then object=$1; fi

case $object in
    -r|--repository)
        shift

        # Get repository 
        REPOSITORY=$1; shift
        
        # Execute command
        COMMAND=$1; shift
        COMMAND_PARAMS=$*
        
        case $COMMAND in
            download | fetch | install | update | remove | show)
                bandit_repository_do
                ;;
            *) 
                bandit_exit "BANDIT: Command ${COMMAND} not defined for repositories."
                ;;
        esac
        ;;
    -c|--catalog)
        shift

        # Get catalog 
        CATALOG=$1; shift
        
        # Execute command
        COMMAND=$1; shift
        COMMAND_PARAMS=$*
        case $COMMAND in
            find | download | fetch | install | remove)
                bandit_catalog_do
                ;;
            *) 
                bandit_exit "BANDIT: Command ${COMMAND} not defined for catalogs."
                ;;
        esac
        ;;
    -b|--bundle | --default)
        # Get the bundle name
        if [ "$object" != "--default" ]; then shift; fi

        BUNDLE=$1; shift

        # Get optional item in the bundle
        ITEM="all"
        case $1 in 
            -i|--item) 
                shift
                ITEM="$1"; shift
                ;;
        esac

        # Get the command
        COMMAND=$1; shift

        # Get optional command parameters
        COMMAND_PARAMS="$@"
        
        # Set default parameter, if nothing provided
        if [ -z "$COMMAND_PARAMS" ]; then
            case $COMMAND in
                edit)
                    COMMAND_PARAMS="--conf"
                    ;;
                *)
                    COMMAND_PARAMS="--all"
                    ;;
            esac
        fi
        # Check allowed command parameters
        for p in ${COMMAND_PARAMS[*]}; do
            case $p in
                --all | --sources | --builds | --desc | --conf | --tag=* | --ignore-certs)
                    : # Accepted
                    ;;
                --*)
                    bandit_exit "BANDIT: Parameter ${COMMAND_PARAMS} not defined for bundle commands."
                    ;;
            esac
        done
        
        # Start the work on the bundle
        bandit_mkdir $BANDIT_LOGS/bundles
        case $COMMAND in
            config | copy | rename | delete | move | edit)
                # Run interactively without logging
                bandit_bundle_do 
                ;;
            download | fetch | build | install | raise | remove)
                # All other commands run non-interactively and log
                bandit_timestamp stamp
                (time bandit_bundle_do) 2>&1 \
                    | tee $BANDIT_LOGS/bundles/${stamp}-${BUNDLE}.${COMMAND}.log
                ;;
            *) 
                bandit_exit "BANDIT: Command ${COMMAND} not defined for bundles."
                ;;
        esac
	;;
    -p|--package)
        shift

        # Get package expression
        package_expr=$1; shift
        
        # Execute command
        COMMAND=$1; shift
        COMMAND_PARAMS="$@"
        
        case $COMMAND in
            bundles)
                bandit_db_get_packages_available packages ${package_expr}
                for p in $packages
                do
                    bandit_path_get_catalog CATALOG $p
                    bandit_path_get_bundle  BUNDLE  $p
                    bandit_path_get_package PACKAGE $p
                    echo "[$CATALOG/${BUNDLE}] ${PACKAGE}" 
                done
                ;;
            files)
                bandit_db_get_packages_installed packages ${package_expr}
                for p in $packages
                do
                    bandit_path_get_package PACKAGE $p
                    bandit_db_get_package_files $PACKAGE
                done
                ;;
            info)
                bandit_db_get_packages_available packages ${package_expr}
                for p in $packages
                do
                    bandit_path_get_catalog CATALOG $p
                    bandit_path_get_bundle  BUNDLE  $p
                    bandit_path_get_package PACKAGE $p
                    echo "Information for [$CATALOG/${BUNDLE}] ${PACKAGE}" 
                    bandit_db_get_package_info $PACKAGE
                done
                ;;
            *) 
                bandit_exit "BANDIT: Command ${COMMAND} not defined for packages."
                ;;
        esac
        ;;
    -s|--system)
        shift

        # Get catalog 
        SYSTEM=$1; shift
        
        # Get command
        COMMAND=$1; shift
        COMMAND_PARAMS=$*

        # Start the work on the system
        bandit_mkdir $BANDIT_LOGS/systems
        
        case $COMMAND in
            enter)
                # Run interactively without logging
                bandit_system_do 
                ;;
            init | check | clean)
                # All other commands run non-interactively and log
                bandit_timestamp stamp
                (time bandit_system_do) 2>&1 \
                    | tee $BANDIT_LOGS/systems/${stamp}-${SYSTEM}.${COMMAND}.log
                ;;
            *) 
                bandit_exit "BANDIT: Command ${COMMAND} not defined for systems."
                ;;
        esac
        ;;
    -x|--cache)
        shift

        # Get cache 
        CACHE=$1; shift
        
        # Get command
        COMMAND=$1; shift
        COMMAND_PARAMS=$*

        # Start the work on the system
        bandit_mkdir $BANDIT_LOGS/systems
        
        case $COMMAND in
            init | show | clean )
                # Run interactively without logging
                bandit_cache_do 
                ;;
            *) 
                bandit_exit "BANDIT: Command ${COMMAND} not defined for caches."
                ;;
        esac
        ;;
    *)
        bandit_exit "BANDIT: Unknow option $1."
        ;;
esac
