#!/bin/bash
#
# bandit - the Build AND Install Toolkit
#
# Copyright (C) 2015-2018 Angel Linares Zapater
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as 
# published by the Free Software Foundation. See the COPYING file.
#
# This program is distributed WITHOUT ANY WARRANTY; without even the 
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
#

source $BANDIT_HOME/etc/bandit.conf
source $BANDIT_HOME/bin/bandit_common
source $BANDIT_HOME/bin/bandit_database

###----------------------------------------
# Display information commands. 
# Do not source all scripts yet. Just show info and quit.
###----------------------------------------

source $BANDIT_HOME/bin/bandit_help
source $BANDIT_HOME/bin/bandit_search

#---
# Work with display-only commands
#---

case $1 in 
    -h|--help | help | "")
	shift;
	
	case $1 in
	    edit)
		bandit_show_help_edit
		;;
	    search)
		bandit_show_help_search
		;;
	    systems)
		bandit_show_help_systems
		;;
	    repositories)
		bandit_show_help_repositories
		;;
	    catalogs)
		bandit_show_help_catalogs
		;;
	    bundles)
		bandit_show_help_bundles
		;;
	    packages)
		bandit_show_help_packages
		;;
	    *)
		bandit_show_version
		bandit_show_help
		;;
	esac
	exit 0
	;;
    -v|--version)
	bandit_show_version
	exit 0
	;;
esac

#---
# Work with read-only commands
#---

# Check permissions to read files...
[ -r $BANDIT_LOGS ]          || bandit_exit "BANDIT: Permission denied to read from logs directory."
[ -r $BANDIT_XBUILDS ]       || bandit_exit "BANDIT: Permission denied to read from builds cache."
[ -r $BANDIT_XSOURCES ]      || bandit_exit "BANDIT: Permission denied to read from sources cache."
[ -r $BANDIT_XCATALOGS ]     || bandit_exit "BANDIT: Permission denied to read from catalogs cache."
[ -r $BANDIT_XREPOSITORIES ] || bandit_exit "BANDIT: Permission denied to read from repositories cache."
[ -r $BANDIT_CATALOGS ]      || bandit_exit "BANDIT: Permission denied to read from catalogs directory."
[ -r $BANDIT_REPOSITORIES ]  || bandit_exit "BANDIT: Permission denied to read from repositories directory."

# Determine the use of a pager
if [ "$BANDIT_PAGER" = "none" ]; then 
    pager="no"
    # Set defaut pager
    BANDIT_PAGER="more"
else
    pager=yes
fi

# Change default pager
case $1 in 
    "--pager")
	pager="yes"
	shift;
	;;
    "--no-pager")
	pager="no"
	shift;
	;;
esac

case $1 in 
    search)
	shift;
	
	# Get search options
	options=""
	while getopts "rcbixfl" opt; do
	    case $opt in
		r|c|b|i|f|l|x)
		    options+=$opt
		    ;;
		\?)
		    echo "Invalid option: -$OPTARG"
		    exit 1
		    ;;
	    esac
	done
	# Skip options so expression is left in $1
	shift $((OPTIND-1))

	# Set default search options when none are provided
	if [ "$options" == "" ]; then
	    if [ "$@" ]; then
		# Search the expression in bundles and items
		options="bi"    
	    else
		# No expression. Show repositories and catalogs 
		options="rc"
	    fi
	fi

	# Get search expression
	expr="all"
	[ $# -ge 1 ] && expr=$1
	
	# Do the search
	if [ "$pager" == "yes" ]; then
	    bandit_search ${expr} ${options} | $BANDIT_PAGER
	else
	    bandit_search ${expr} ${options}
	fi
	
	exit 0
	;;
esac

#---
# Work with write-only commands
#---

# Check permissions to write bandit.conf file
[ -w $BANDIT_HOME/etc/bandit.conf ] || bandit_exit "BANDIT: Permission denied to write bandit.conf file."

case $1 in
    edit)
	shift;
	${EDITOR:-vi} $BANDIT_HOME/etc/bandit.conf
	source $BANDIT_HOME/etc/bandit.conf
	exit 0
	;;
esac

###----------------------------------------
# Working with commands and objects...
###----------------------------------------

source $BANDIT_HOME/bin/bandit_find
source $BANDIT_HOME/bin/bandit_repository
source $BANDIT_HOME/bin/bandit_catalog
source $BANDIT_HOME/bin/bandit_bundle

# Check permissions to write files...
[ -w $BANDIT_TMP ]           || bandit_exit "BANDIT: Permission denied to write in the work directory ."
[ -w $BANDIT_LOGS ]          || bandit_exit "BANDIT: Permission denied to write in the logs directorys."
[ -w $BANDIT_XBUILDS ]       || bandit_exit "BANDIT: Permission denied to write in the builds cache."
[ -w $BANDIT_XSOURCES ]      || bandit_exit "BANDIT: Permission denied to write in the sources cache."
[ -w $BANDIT_XCATALOGS ]     || bandit_exit "BANDIT: Permission denied to write in the catalogs cache."
[ -w $BANDIT_XREPOSITORIES ] || bandit_exit "BANDIT: Permission denied to write in the repositories cache."
[ -w $BANDIT_CATALOGS ]      || bandit_exit "BANDIT: Permission denied to write in the catalogs directory."
[ -w $BANDIT_REPOSITORIES ]  || bandit_exit "BANDIT: Permission denied to write in the repositories directory."

# Check if any type of object is set or set default 
object="--default"
if [[ $1 == -* ]]; then object=$1; fi

case $object in
    -r|--repository)
	shift

	# Get repository 
	REPOSITORY=$1
	shift
	
	# Execute command
	COMMAND=$1
	shift
	COMMAND_PARAMS=$*
	case $COMMAND in
	    download | fetch | install | update | remove | show)
		bandit_repository_do
		;;
	    *) 
		bandit_exit "BANDIT: Command ${COMMAND} not defined for repositories."
		;;
	esac
	;;
    -c|--catalog)
	shift

	# Get catalog 
	CATALOG=$1
	shift
	
	# Execute command
	COMMAND=$1; shift
	COMMAND_PARAMS=$*
	case $COMMAND in
	    find | download | fetch | install | remove)
		bandit_catalog_do
		;;
	    *) 
		bandit_exit "BANDIT: Command ${COMMAND} not defined for catalogs."
		;;
	esac
	;;
    -b|--bundle | --default)
	# Get the bundle name
	if [ "$object" != "--default" ]; then shift; fi

	BUNDLE=$1
	shift

	# Get optional item in the bundle
	ITEM="all"
	case $1 in 
	    -i|--item) 
		shift
		ITEM="$1"; shift
		;;
	esac

	# Get the command
	COMMAND=$1; shift

	# Get optional command parameters
	COMMAND_PARAMS=$*;
	
	# Set default parameter, if nothing provided
	if [ -z "$COMMAND_PARAMS" ]; then
	    case $COMMAND in
		edit)
		    COMMAND_PARAMS="--conf"
		    ;;
		*)
		    COMMAND_PARAMS="--all"
		    ;;
	    esac
	fi
	case $COMMAND_PARAMS in
	    --all | --sources | --builds | --desc | --conf)
		:
		;;
	    --*)
		bandit_exit "BANDIT: Parameter ${COMMAND_PARAMS} not defined for bundle commands."
		;;
	esac

        # Start the work on the bundle
	bandit_mkdir $BANDIT_LOGS/bundles
	case $COMMAND in
	    config | copy | edit)
		# Run interactively without logging
		bandit_bundle_do 
		;;
	    download | fetch | build | install | raise | remove)
		# All other commands run non-interactively and log
		bandit_timestamp stamp
		(time bandit_bundle_do) 2>&1 \
		    | tee $BANDIT_LOGS/bundles/${BUNDLE}.$COMMAND-${stamp}.log
		;;
	    *) 
		bandit_exit "BANDIT: Command ${COMMAND} not defined for bundles."
		;;
	esac
	;;
    -p|--package)
	shift

	# Get package expression
	package_expr=$1; shift
	
	# Execute command
	COMMAND=$1; shift
	COMMAND_PARAMS="$@"
	
	case $COMMAND in
	    bundles)
		bandit_db_get_packages_available packages ${package_expr}
		for p in $packages
		do
		    bandit_path_get_catalog CATALOG $p
		    bandit_path_get_bundle  BUNDLE  $p
		    bandit_path_get_package PACKAGE $p
   		    echo "[$CATALOG/${BUNDLE}] ${PACKAGE}" 
		done
		;;
	    files)
		bandit_db_get_packages_installed packages ${package_expr}
		for p in $packages
		do
		    bandit_path_get_package PACKAGE $p
		    bandit_db_get_package_files $PACKAGE
		done
		;;
	    info)
		bandit_db_get_packages_available packages ${package_expr}
		for p in $packages
		do
		    bandit_path_get_catalog CATALOG $p
		    bandit_path_get_bundle  BUNDLE  $p
		    bandit_path_get_package PACKAGE $p
		    echo "Information for [$CATALOG/${BUNDLE}] ${PACKAGE}" 
		    bandit_db_get_package_info $PACKAGE
		done
		;;
	    *) 
		bandit_exit "BANDIT: Command ${COMMAND} not defined for packages."
		;;
	esac
	;;
    -s|--system)
	shift

	bandit_mkdir $BANDIT_LOGS/systems
	bandit_timestamp stamp
	# Ensure that systems related command shells are run using /bin/bash
	(time /bin/bash $BANDIT_HOME/bin/systems/bandit-"$1"-"$2".sh) 2>&1 \
            | tee $BANDIT_LOGS/systems/bandit-"$1"."$2"-${stamp}.log
	;;
    *)
	bandit_exit "BANDIT: Unknow option $1."
	;;
esac

# Done
exit 0
